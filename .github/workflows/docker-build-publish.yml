name: Build and Publish Docker Images

on:
  push:
    branches: [main, development]
    tags:
      - "[0-9][0-9][0-9][0-9]*.*" # matches YYYY.ReleaseNumber
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "development"
        type: choice
        options: [development, main]

env:
  REGISTRY: ghcr.io

jobs:
  generate-build-ids:
    runs-on: ubuntu-latest
    outputs:
      timestamp: ${{ steps.build_ids.outputs.timestamp }}
      ref_type: ${{ steps.build_ids.outputs.ref_type }}
      ref_name: ${{ steps.build_ids.outputs.ref_name }}
      unique_run_id: ${{ steps.build_ids.outputs.unique_run_id }}
      image_prefix: ${{ steps.build_ids.outputs.image_prefix }}
    steps:
      - name: Generate build identifiers
        id: build_ids
        run: |
          TIMESTAMP=$(date -u '+%Y%m%d-%H%M%S')

          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            REF_TYPE="tag"
          else
            REF_TYPE="branch"
          fi

          REF_NAME=$(echo "${{ github.ref_name }}" | tr '/' '-')
          UNIQUE_RUN_ID="${REF_NAME}-${TIMESTAMP}-${GITHUB_RUN_ID}"

          REPO_OWNER_LOWER=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')
          REPO_NAME_LOWER=$(echo '${{ github.event.repository.name }}' | tr '[:upper:]' '[:lower:]')
          IMAGE_PREFIX="${REPO_OWNER_LOWER}/${REPO_NAME_LOWER}"

          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "ref_type=$REF_TYPE" >> $GITHUB_OUTPUT
          echo "ref_name=$REF_NAME" >> $GITHUB_OUTPUT
          echo "unique_run_id=$UNIQUE_RUN_ID" >> $GITHUB_OUTPUT
          echo "image_prefix=$IMAGE_PREFIX" >> $GITHUB_OUTPUT

  build-and-push:
    runs-on: ubuntu-latest
    needs: generate-build-ids
    outputs:
      docker_tag: ${{ steps.set_tag.outputs.docker_tag }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker (tag)
        id: meta_tag
        if: startsWith(github.ref, 'refs/tags/')
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ needs.generate-build-ids.outputs.image_prefix }}
          tags: |
            type=match,pattern=\d{4}\.\d+,group=0
            type=sha,format=short

      - name: Extract metadata for Docker (branch)
        id: meta_branch
        if: startsWith(github.ref, 'refs/heads/')
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ needs.generate-build-ids.outputs.image_prefix }}
          tags: |
            type=ref,event=branch
            type=sha,format=short

      - name: Set effective Docker tag
        id: set_tag
        run: |
          if [[ "${{ steps.meta_tag.outputs.version }}" != "" ]]; then
            echo "docker_tag=${{ steps.meta_tag.outputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "docker_tag=${{ steps.meta_branch.outputs.version }}" >> $GITHUB_OUTPUT
          fi

      - name: Build and push API image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          tags: |
            ${{ env.REGISTRY }}/${{ needs.generate-build-ids.outputs.image_prefix }}:api-${{ steps.set_tag.outputs.docker_tag }}
            ${{ env.REGISTRY }}/${{ needs.generate-build-ids.outputs.image_prefix }}:api-latest
          target: deploy

      - name: Build and push database image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          tags: |
            ${{ env.REGISTRY }}/${{ needs.generate-build-ids.outputs.image_prefix }}:postgresql-${{ steps.set_tag.outputs.docker_tag }}
            ${{ env.REGISTRY }}/${{ needs.generate-build-ids.outputs.image_prefix }}:postgresql-latest
          target: database
